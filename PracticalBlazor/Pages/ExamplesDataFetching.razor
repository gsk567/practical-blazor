@page "/examples/data-fetching"
@using Newtonsoft.Json
@inherits SlidePage
@inject HttpClient HttpClient

<PageTitle>@GetBrandedTitle($"Data Fetching | Examples | {Texts.Title}")</PageTitle>

<SlideContent HeaderTitle="Data Fetching" HeaderSection="Examples">
     <div class="d-flex">
         <div class="d-flex m-auto">
             <div class="m-auto">
                 <div class="input-group mb-3">
                     <select @bind="sourceUrl" class="form-control">
                         <option value=""> - </option>
                         <optgroup label="catfact.ninja"> 
                             <option value="https://catfact.ninja/fact">https://catfact.ninja/fact</option>
                             <option value="https://catfact.ninja/facts">https://catfact.ninja/facts</option>
                             <option value="https://catfact.ninja/breeds">https://catfact.ninja/breeds</option>
                         </optgroup>
                     </select>
                    <button @onclick="FetchDataAsync" class="btn btn-primary">Fetch</button>
                 </div>
                
                @if (!string.IsNullOrWhiteSpace(resultJson))
                {
                    <SourceCodeRenderer SourceCode="@resultJson" Language="json"/>
                }
             </div>
         </div>
         <div class="d-flex m-auto">
             <div class="d-flex m-auto">
                <SourceCodeRenderer SourceCodeKey="DataFetching" Language="cshtml-razor"/>
             </div>
         </div>
     </div>
</SlideContent>


@code {
    private string sourceUrl;
    private string resultJson;

    private async Task FetchDataAsync()
    {
        try
        {
            var rawJson = await HttpClient.GetStringAsync(this.sourceUrl);
            var parsedJson = JsonConvert.DeserializeObject(rawJson);
            this.resultJson = JsonConvert.SerializeObject(parsedJson, Formatting.Indented);
        }
        catch (Exception ex)
        {
            this.resultJson = null;
        }
    }
}